apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.compileSdkVersion
        versionCode 1017
        versionName "1.1.7"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "androidx.core:core-ktx:$ktxVersion"
    implementation "com.android.volley:volley:1.1.1"
    implementation "com.google.code.gson:gson:2.8.6"
    implementation 'com.google.android.material:material:1.2.1'
}

uploadArchives {
    String mavenRepoURL = System.getenv('MAVEN_REPO_RELEASE_URL') ?: ''
    String nexusUserName = System.getenv("NEXUS_USERNAME") ?: ''
    String nexusPassword = System.getenv("NEXUS_PASSWORD") ?: ''
    String mavenGroupId = 'com.jiandanlangman'
    String extension = 'aar'
    String mavenArtifactId = 'requester'
    String versionName = android.defaultConfig.versionName

    gradle.buildStarted {
        if ('' == mavenRepoURL || '' == nexusUserName || '' == nexusPassword) {
            String exception = 'undefined param NEXUS_USERNAME and param NEXUS_PASSWORD.'
            println(exception)
            throw IllegalArgumentException(exception)
        }
    }

    repositories {
        mavenDeployer {
            repository(url: mavenRepoURL) {
                authentication(userName: nexusUserName, password: nexusPassword)
            }
            pom.project {
                version versionName
                artifactId mavenArtifactId
                groupId mavenGroupId
                packaging extension
            }
        }
    }

    gradle.buildFinished {
        if ('' != mavenRepoURL && '' != nexusUserName && '' != nexusPassword) {
            String mavenGroupPath = mavenGroupId.replace(".", "/")
            println("Upload success, URL: $mavenRepoURL/$mavenGroupPath/$mavenArtifactId/$versionName/$mavenArtifactId-$versionName.$extension")
        }
    }
}
